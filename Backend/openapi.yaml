openapi: 3.0.0
servers:
  - description: server
    url: http://localhost:4000/api
info: 
  title: API GERSA
  version: 1.0.0
tags:
- name: users
  description: Access, update users information
- name: employees
  description: Access, update employee information
- name: contracts
  description: Access, update contracts information
- name: schedule
  description: Create, read, update, delete schedules information
- name: employeeSchedules
  description: Create, Delete
paths: 
  /users/{id}:
    get:
      tags:
      - users
      summary: Obtiene los usuarios por rl numero de id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        
      responses:
        '200':
          
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch: 
      tags:
      - users
      summary: Actualiza la información del usuario con el id.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid user supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
      security:
        - bearerAuth: []
  /users/authenticate:
    post:
      tags: 
      - users
      summary: Login del usuario.
      responses:
        '200':
          description: User finded 
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLog"
  /users:
    post:
      tags:
      - users
      summary: Inserta la información de un nuevo usuario.
      responses:
        '200':
          description: Creado correctamente.
        '400':
          description: Usuario o contraseña incorrecta
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
  
  /employees/{employeeId}:
    patch:
      tags: 
      - employees
      summary: End Point para modificar los atributos del empleado
      parameters:
      - name: employeeId
        in: path
        description: Identificador del empleado
        required: true
        schema:
          type: integer
      requestBody: 
        description: "Para realizar un patch no es necesario enviar todo el schema, solo el atributo a modificar."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaEmployee'
      responses:
        200:
          description: Actualización de datos correctamente.
          $ref: '#/components/schemas/Exito'
        400:
          $ref: '#/components/schemas/BadRequest'
        401:
          $ref: '#/components/schemas/UnauthorizedError'
        404:
          $ref: '#/components/schemas/NotFound'
        500:
          $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
    
    put:
      tags: 
      - employees
      summary: End Point para modificar los atributos del empleado
      parameters:
      - name: employeeId
        in: path
        description: Identificador del empleado
        required: true
        schema:
          type: integer
      requestBody: 
        description: "Para realizar un put es necesario enviar todo el schema del empleado."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaEmployee'
      responses:
        200:
          description: Actualización de datos correctamente.
          $ref: '#/components/schemas/Exito'
        400:
          $ref: '#/components/schemas/BadRequest'
        401:
          $ref: '#/components/schemas/UnauthorizedError'
        404:
          $ref: '#/components/schemas/NotFound'
        500:
          $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
    get:
      tags: 
      - employees
      summary: End Point para obtener los atributos del empleado
      parameters:
      - name: employeeId
        in: path
        description: Identificador del empleado
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Peticion exitosa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaEmployee'
        400:
          $ref: '#/components/schemas/BadRequest'
        401:
          $ref: '#/components/schemas/UnauthorizedError'
        404:
          $ref: '#/components/schemas/NotFound'
        500:
          $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
  /employees/{userId}/contracts:
    get:
      tags:
      - contracts
      summary: Obtiene la informacion de la base de datos de los contratos de un empleado
      parameters:
      - name: userId
        in: path
        description: Identificador de los contratos a obtener
        required: true
        schema:
          type: integer
      responses:
        200:
          description: (OK) La informacion de los contratos se obtuvo de forma exitosa
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ExitoContratosGet'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /employees/{employeeId}/contracts/{idContract}:
    patch:
      tags:
      - contracts
      summary: Modifica datos en especifico del contrato 
      description: "El EndPoint recibe via url el id del empleado y el id del contrato que se desea modificar, en caso de ser exitoso se regresan los datos modificados del contrato . Para realizar la petición se necesita mandar token por headers"
      parameters:
      - name: employeeId
        in: path
        description: Identificador del empleado
        required: true
        schema:
          type: integer
      - name: idContract
        in: path
        description: Identificador del contrato a modificar
        required: true
        schema:
          type: integer
      requestBody: 
        description: "Para realizar un patch no es necesario enviar todo el schema, solo el atributo a modificar."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyContratosPut'
        required: false
      responses:
        200:
          description: (OK), modificación exitosa 
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ExitoContratosGet'
        400:
          $ref: '#/components/schemas/ContractsBadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundEmployeeContracts'
        500:
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    put:
      tags:
      - contracts
      summary: Modifica los datos del contrato
      description: "El EndPoint recibe via url el id del empleado y del contrato que se desea modificar, en caso de ser exitoso se regresan los datos modificados del contrato . Para realizar la petición se necesita mandar token por headers"
      parameters:
      - name: idContract
        in: path
        description: Es el id del contrato a modificar
        required: true
        schema:
          type: integer
      - name: employeeId
        in: path
        description: Es el id del empleado al que se cambiara la info de su contrato
        required: true
        schema:
          type: integer
      requestBody: 
        description: "Para realizar un put es necesario enviar todos los atributos del schema."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyContratosPut'
        required: true
      responses:
        200:
          description: (OK), modificación exitosa 
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ExitoContratosGet'
        400:
          $ref: '#/components/schemas/ContractsBadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundEmployeeContracts'
        500:
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
    delete:
      tags:
      - contracts
      summary: Elimina el contrato 
      parameters:
      - name: idContract
        in: path
        description: Identificador del contrato a modificar
        required: true
        schema:
          type: integer
      - name: employeeId
        in: path
        description: Identificador del empleado al que se modificara eliminar el contrato indicado
        required: true
        schema:
          type: integer
      responses:
        200:
          description: (OK), modificación exitosa 
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ExitoContratosDelete'
        400:
          $ref: '#/components/schemas/ContractsBadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundEmployeeContracts'
        500:
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /employees/{userId}/accessCode:
    get:
      tags:
      - employees
      summary: Recupera el código de acceso
      description: "El EndPoint recibe via url el id del usuario"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      responses:
        200:
          description: (OK), modificación exitosa 
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Exito'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /employees/auth:
    get:
      tags:
      - employees
      summary: Recupera los datos del empleado
      description: "El EndPoint recibe via header el código de acceso del empleado y regresa los datos del empleado "
      parameters:
        - name: accessCode
          in: header
          required: true
          schema:
            type: number
      responses:
        200:
          description: ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Auth'
        400:
          description: bad
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthBadRequest'
        404:
          description: bad
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthNotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /employees/{employeeId}/events:
    get:
      tags:
      - employees
      summary: Recupera los eventos del empleado seleccionado
      description: "El EndPoint en caso de no tener ni fecha inicio ni fecha fin regresará los eventos del día actual; si se incluye la fecha inicio y fecha fin regresa el arreglo de eventos que pertecen a este intervalo de fechas"
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: number
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Events'
        400:
          description: bad
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EventsBadRequest'
        404:
          description: bad
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EventNotFound'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
      - employees
      summary: Registra el evento del empleado seleccionado
      description: "El EndPoint registra el evento del empleado, dependiendo del tipo de evento(retardo,normal,acta).Recibe via body "
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: number
      responses:
        200:
          description: ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EventsPOST'
        400:
          description: bad
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EventsBadRequestPOST'
        500:
          $ref: '#/components/responses/ServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventRegister"
  /employees/{employeeId}/contracts/:
    post:
      tags:
      - employees
      summary: Inserta la informacion de un nuevo contrato
      parameters:
      - name: employeeId
        in: path
        description: Identificador del empleado al que se registrará un nuevo contrato
        required: true
        schema:
          type: integer
      
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyContratosPost'
        required: true
      responses:
        200:
          description: (OK) Registro exitoso
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ExitoBodyContractsResponse'
        400:
          description: (OK) Registro exitoso
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ExitoBodyContractsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundEmployeePOST'
        500:
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: []
  /employeeSchedules/{employeeId}/{scheduleId}:
    delete:
      tags:
      - employeeSchedules
      summary: End Point para la eliminación de la relación del empleado con el Schedule
      description: El End Point recibe por body el id del empleado y el id del schedule del horario
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: integer
        - name: scheduleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (OK) Se eliminaron los datos de forma correcta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exito'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
  /employeeSchedules:
    post:
      tags:
      - employeeSchedules
      summary: End Point para el registro de la relación del empleado con el Schedule
      description: El End Point recibe por body el id del empleado y el id del schedule del horario
      requestBody: 
        description: "Para realizar un post es necesario enviar todo el schema."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyEmployeeSchedule'
      responses:
        200:
          description: (OK) La informacion de los contratos se obtuvo de forma exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exito'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
  /employees/{employeeId}/employeeSchedule/:
    get:
      tags:
      - employees
      summary: End Point para el registro de la relación del empleado con el Schedule
      description: El End Point recibe por path el id del empleado y por body el id del schedule del horario
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (OK) La informacion de los horarios se obtuvo de forma exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exito'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
  /schedules/{scheduleId}/:
    patch:
      tags:
      - schedule
      summary: Se modifican propiedades de un horario
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: number
      requestBody: 
        description: "Para realizar un patch no es necesario incluir todo el schema,solo la propiedad a editar."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaSchedulePost'      
      responses:
        200:
          description: (OK) La informacion de los contratos se obtuvo de forma exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaSchedulePatch'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
    put:
      tags:
      - schedule
      summary: Se modifican propiedades de un horario
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: number
      requestBody: 
        description: "Para realizar un put es necesario incluir todo el schema."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaSchedulePost'      
      responses:
        200:
          description: (OK) La informacion de los contratos se obtuvo de forma exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaSchedulePatch'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
    delete:
      tags:
      - schedule
      summary: Se eliminara el registro del horario correspondiente al id recibido
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: number
      responses:
        200:
          description: (OK) Se elimino el registro exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheduleDelete'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundSchedules'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
  /schedules/:
    post:
      tags:
      - schedule
      summary: Se crea un horario
      requestBody: 
        description: "Para realizar un post es necesario enviar todo el schema."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaSchedulePost'
        
      responses:
        200:
          description: (OK) La informacion de los contratos se obtuvo de forma exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exito'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []
    
    get:
      tags:
      - schedule
      summary: Se obtiene la colección de horarios
        
      responses:
        200:
          description: (OK) La informacion de los contratos se obtuvo de forma exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaScheduleGet'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundSchedules'
        500:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      security:
        - bearerAuth: []


components: 
  responses:
    UnauthorizedError:
      description: (Unauthorized) Usuario no autorizado
      
    NotFound:
      description: (Not Found) No se encontro la informacion
      
    BadRequest:
      description: (Bad Request) No se encontro la informacion
    
    ServerError:
      description: Error en el servidor
      
    NotFoundEmployee:
      description: Código de acceso no encontrado
    NotFoundEmployeePOST:
      description: (Not Found) No se encontro  ningú empleado  con ese id
    NotFoundEmployeeContracts:
      description: (Not Found) No se encontro  ningú empleado o contrato con ese id
    ContractsPatchNotFound:
      description: (Not Found) No se encontro  ningú empleado o contrato con ese id

    Create:
      description: Creado correctamente.
      
    Exito:
      description: Registro exitoso
    
      
  parameters:
    token: 
          name: token
          in: header
          description: Token de auntentificacion
          required: true
          schema:
            type: integer    
            
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:
    ContractsBadRequest:     
      description:  Contracts Bad Request
      type: object
      properties:
        message:
          type: string
          example: Algo salio mal
          description: Events Bad Request
        ok:
          type: boolean
          example: false
          description: ok, es un booleano que indica si la repuesta fue exitosa o no
    UnauthorizedError:
      description:  Usuario no autorizado
      type: object
      properties:
        message:
          type: string
          example: Usuario no autorizado
          description: Usuario no autorizado
        ok:
          type: boolean
          example: false
          description: ok, es un booleano que indica si la repuesta fue exitosa o no
    BadRequest:     
      description:  Algo salio mal
      type: object
      properties:
        message:
          type: string
          example: Algo salio mal
          description: Events Bad Request
        ok:
          type: boolean
          example: false
          description: ok, es un booleano que indica si la repuesta fue exitosa o no
    Auth:      
      type: object
      properties:
        data: 
          type: object
          properties:
            employeeId:
              type: integer
            fistName:
              type: string
            lastName:
              type: string
        message:
         type: string
         description: Registro exitoso
        ok:
         type: boolean
         example: true
         description: (True) Salio bien, (False) Algo salio mal
    Events:      
      type: object
      properties:
        data: 
          type: array
          items: 
            type: object
            properties:
              id:
                type: integer
              employeeId:
                type: integer
              eventType:
                type: integer
              dateEvent:
                type: string
                format: date
              longitudeEvent:
                type: string
              latitudeEvent:
                type: string
        message:
         type: string
         example: successful
         description: Esta propiedad es un mensaje con detalle sobre la respuesta
        ok:
         type: boolean
         example: true
         description: (True) Salio bien, (False) Algo salio mal
    schemaScheduleGet:      
      type: object
      properties:
        data: 
          type: array
          items: 
            type: object
            properties:
              scheduleName:
                type: string
              horaEntrada:
                type: string
                format: time
              horaSalida:
                type: string
                format: time
              tiempoDescanso:
                type: integer
              tiempoRetraso:
                type: integer
              tiempoActaAdministrativa:
                type: integer
              Lunes:
                type: boolean
              Martes:
                type: boolean
              Miercoles:
                type: boolean
              Jueves:
                type: boolean
              Viernes:
                type: boolean
              Sabado:
                type: boolean
              Domingo:
                type: boolean 
        message:
         type: string
         example: successful
         description: Esta propiedad es un mensaje con detalle sobre la respuesta
        ok:
         type: boolean
         example: true
         description: (True) Salio bien, (False) Algo salio mal
    schemaSchedulePatch:      
      type: object
      properties:
        data: 
          type: object
          properties:
            scheduleName:
              type: string
            horaEntrada:
              type: string
              format: time
            horaSalida:
              type: string
              format: time
            tiempoDescanso:
              type: integer
            tiempoRetraso:
              type: integer
            tiempoActaAdministrativa:
              type: integer
            Lunes:
              type: boolean
            Martes:
              type: boolean
            Miercoles:
              type: boolean
            Jueves:
              type: boolean
            Viernes:
              type: boolean
            Sabado:
              type: boolean
            Domingo:
              type: boolean 
        message:
         type: string
         example: successful
         description: Esta propiedad es un mensaje con detalle sobre la respuesta
        ok:
         type: boolean
         example: true
         description: (True) Salio bien, (False) Algo salio mal
    AuthBadRequest:      
      type: object
      properties:
        message:
         type: string
         example: Algo salio mal
         description: Auth Bad Request
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    EventsPOST:      
      type: object
      properties:
        message:
         type: string
         example: Registro exitoso
         description: Se registro el evento correctamente.
        ok:
         type: boolean
         example: ok
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    EventsBadRequestPOST:      
      type: object
      properties:
        message:
         type: string
         example: Algo salio mal
         description: Events Bad Request
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    EventsBadRequest:      
      type: object
      properties:
        message:
         type: string
         example: Algo salio mal
         description: Events Bad Request
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    AuthNotFound:      
      type: object
      properties:
        message:
         type: string
         example: El código de acceso es incorrecto
         description: Esta propiedad es un mensaje con detalle sobre la respuesta
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    NotFound:      
      type: object
      properties:
        message:
         type: string
         example: El id de usuario no se encontro
         description: El id de usuario no se encontro
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    NotFoundSchedules:      
      type: object
      properties:
        message:
         type: string
         example: No se encontró ningun horario.
         description: No se encontró ningun horario.
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    ServerError:      
      type: object
      properties:
        message:
         type: string
         example: Error en el servidor
         description: Error en el servidor
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no
    EventNotFound:      
      type: object
      properties:
        message:
         type: string
         example: No se encontraron eventos
         description: Esta propiedad es un mensaje con detalle sobre la respuesta
        ok:
         type: boolean
         example: false
         description: ok, es un booleano que indica si la repuesta fue exitosa o no

    EventRegister:
      type: object
      properties:
        employeeId:
          type: integer
        latitudeEvent:
          type: string
        longitudeEvent:  
          type: string
        eventType:  
          type: string
    Exito:
      type: object
      properties:
        message:
         type: string
         description: Registro exitoso
        ok:
         type: boolean
         example: true
         description: (True) Salio bien, (False) Algo salio mal
    AlreadyRegisterAccess:
      type: object
      properties:
        message:
         type: string
         example: Ya registraste tu entrada el día de hoy
         description: Ya registraste tu entrada el día de hoy
        ok:
         type: boolean
         example: false
         description: (True) Salio bien, (False) Algo salio mal
      
    NotRegisterAccessYet:
      description: Aún no registras una entrada el día de hoy
      
    AlreadyCheckedOut:
      description: Ya registraste tu salida el día de hoy
    ExitoCheckOk:
      type: object
      properties:
        message:
         type: string
         description: Completado con exito
        ok:
         type: boolean
         description: (True) Salio bien, (False) Algo salio mal
        data: 
          type: object
          properties:
            userId:
              type: integer
            date:
              type: string
            tipo:
              type: string
            fistName:
              type: string
            lastName:
              type: string
    UserLog:
      type: object
      properties:
        username:
          type: string
          example: "prueba@prueba.com"
        password:
          type: string
          example: "prueba"
      xml:
        name: UserLog
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
    
          type: string
        phone:
          type: string
        sendInvitation: 
          type: boolean
    SchemaSchedulePost:
      type: object
      properties:
        scheduleName:
          type: string
        horaEntrada:
          type: string
          format: time
        horaSalida:
          type: string
          format: time
        tiempoDescanso:
          type: integer
        tiempoRetraso:
          type: integer
        tiempoActaAdministrativa:
          type: integer
        Lunes:
          type: boolean
        Martes:
          type: boolean
        Miercoles:
          type: boolean
        Jueves:
          type: boolean
        Viernes:
          type: boolean
        Sabado:
          type: boolean
        Domingo:
          type: boolean
        

    SchemaEmployee:
      type: object
      properties:
        message:
         type: string
         description: Completado con exito
        ok:
         type: boolean
         description: (True) Salio bien, (False) Algo salio mal
        data: 
          type: object
          properties:
            tipoIdentificacion:
              type: string
            documentoIdentidad:
              type: string
            fechaNacimiento: 
              type: string
              format: date
            nacionalidad: 
              type: string
            genero: 
              type: string
            lugarDeTrabajo: 
              type: string
            supervisor:
              type: string
            numeroCuentaBancaria:
              type: string
            swiftBic:
              type: string
            frecuenciaPago: 
              type: string
            direccion1: 
              type: string
            direccion2:
              type: string
            ciudad: 
              type: string
            codigoPostal: 
              type: string
            estadoProvincia: 
              type: string
            pais: 
              type: string
            emergenciaNombre: 
              type: string
            empergenciaTelefono: 
              type: string
            rfc:
              type: string
            numeroImms: 
              type: string
            curp: 
              type: string
            fechaAltaImss:
              type: string
              format: date
            scheduleId:
              type: integer
    Logbook:
      type: object
      properties:
        userid:
          type: string
        username:
          type: string
    BodyContratosPost:
      type: object
      properties:
        userId:
         type: integer
         description: Id del usuario
        tipoDeContrato:
         type: string
         description: Tipo de contrato
        puesto:
         type: string
         description: Nombre del puesto
        fechaDeInicio:
         type: string
         description: Fecha de inicio de contrato
        fechaDeFinalizacion:
         type: string
         description: Fecha de finalizacion de contrato
        horasLaborales:
         type: integer
         description: Horas laborales del contrato
        unidadLaborales:
         type: string
         description: tipo de unidad para laborales(semana, quinciena, mes)
        tipoSalario:
         type: string
         description: tipo de unidad para laborales(semana, quinciena, mes)
        cantidadSalario:
         type: integer
         description: Salario definido en el contrato
    

    BodyEmployeeSchedule:
      type: object
      properties:
        employeeId:
          type: integer
          description: Identificador del empleado
        scheduleId:
         type: integer
         description: Identificador del Schedule
    BodyContratosPut:
      type: object
      properties:
        tipoDeContrato:
         type: string
         description: Tipo de contrato
        puesto:
         type: string
         description: Nombre del puesto
        fechaDeInicio:
         type: string
         description: Fecha de inicio de contrato
        fechaDeFinalizacion:
         type: string
         description: Fecha de finalizacion de contrato
        horasLaborales:
         type: integer
         description: Horas laborales del contrato
        unidadLaborales:
         type: string
         description: tipo de unidad para laborales(semana, quinciena, mes)
        scheduleId:
          type: integer
          description: identificador del horario asignado al empleado
        tipoSalario:
         type: string
         description: tipo de unidad para laborales(semana, quinciena, mes)
        cantidadSalario:
         type: integer
         description: Salario definido en el contrato     
    BodyContratosResponse:
      type: object
      properties:
        message:
         type: string
         description: Usuario no autorizado
        ok:
         type: boolean
         description: (True) Salio bien, (False) Algo salio mal
    ExitoContratosDelete:
      type: object
      properties:
        message:
          type: string
          example: registro eliminado exitosamente
        ok:
          type: boolean
    scheduleDelete:
      type: object
      properties:
        message:
          type: string
          example: registro eliminado exitosamente
        ok:
          type: boolean
    ExitoBodyContractsResponse:
      type: object
      properties:
        message:
          type: string
          example: Registro exitoso!
        ok:
          type: boolean
          example: true
          description: (True) Salio bien, (False) Algo salio mal
          
        data: 
          type: object
          properties:
            id:
              type: integer
              description: Id del contrato
            userId:
              type: integer
              description: Id del usuario
            tipoDeContrato:
              type: string
              description: Tipo de contrato
            puesto:
              type: string
              description: Nombre del puesto
            fechaDeInicio:
              type: string
              format: date
              description: Fecha de inicio de contrato
            fechaDeFinalizacion:
              type: string
              format: date
              description: Fecha de finalizacion de contrato
            horasLaborales:
              type: integer
              description: Horas laborales del contrato
            unidadLaborales:
              type: string
              description: tipo de unidad para laborales(semana, quinciena, mes)
            tipoSalario:
              type: string
              description: tipo de unidad para laborales(semana, quinciena, mes)
            cantidadSalario:
              type: integer
              description: Salario definido en el contrato
            isContractActivide:
              type: boolean
              description: Bandera para definir si el contrato esta activo
    ExitoContratosGet:
      type: object
      properties:
        message:
          type: string
        ok:
          type: boolean
        data: 
          type: object
          properties:
            id:
              type: integer
              description: Id del contrato
            userId:
              type: integer
              description: Id del usuario
            tipoDeContrato:
              type: string
              description: Tipo de contrato
            puesto:
              type: string
              description: Nombre del puesto
            fechaDeInicio:
              type: string
              format: date
              description: Fecha de inicio de contrato
            fechaDeFinalizacion:
              type: string
              format: date
              description: Fecha de finalizacion de contrato
            horasLaborales:
              type: integer
              description: Horas laborales del contrato
            unidadLaborales:
              type: string
              description: tipo de unidad para laborales(semana, quinciena, mes)
            tipoSalario:
              type: string
              description: tipo de unidad para laborales(semana, quinciena, mes)
            cantidadSalario:
              type: integer
              description: Salario definido en el contrato
            isContractActivide:
              type: boolean
              description: Bandera para definir si el contrato esta activo
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'